// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  role        Role         @default(candidate)
  createdAt   DateTime     @default(now())
  UserProfile UserProfile?
  Job         Job[]        @relation("UserPostedJobs")
}

enum Role {
  candidate
  company
  admin
}

enum JobType {
  FullTime
  Contract
  Freelance
}

model UserProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  profilePicture               String?
  title                        String? // New: candidate role/title they are looking for
  preferredLocation            String[]
  currentLocation              String?
  preferredJobType             JobType[]
  currentCTC                   String?
  expectedCTC                  String?
  joiningPeriod                String?
  totalExperience              String?
  relevantSalesforceExperience String?

  skillsJson      Json? // e.g. [{ name: "Apex", experience: 3, level: "primary" }]
  primaryClouds   Json?
  secondaryClouds Json?

  certifications String[]
  workExperience Json?
  education      Json?

  linkedInUrl  String? // New
  trailheadUrl String? // New

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skills {
  id         String  @id @default(uuid())
  name       String  @unique
  isVerified Boolean @default(false)
}

model Certification {
  id         String  @id @default(uuid())
  name       String  @unique
  isVerified Boolean @default(false)
}

model Location {
  id         String  @id @default(uuid())
  name       String  @unique
  isVerified Boolean @default(false)
}

model Cloud {
  id         String  @id @default(uuid())
  name       String  @unique
  isVerified Boolean @default(false)
}

// model Job {
//   id          String   @id @default(uuid())
//   title       String
//   company     String
//   rating      Float?
//   reviews     Int?
//   experience  String?
//   location    String?
//   description String?
//   skills      String[] // Array of skills
//   posted      DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

enum EmploymentType {
  FullTime
  PartTime
  Internship
  Contract
  Freelance
}

enum ExperienceLevel {
  Internship
  EntryLevel
  Mid
  Senior
  Lead
}

enum JobStatus {
  Open
  Closed
  Draft
}

model Job {
  id                  String           @id @default(uuid())
  role                String
  description         String?
  employmentType      EmploymentType
  experience          String?
  experienceLevel     ExperienceLevel?
  location            String?
  skills              String[] // Array of skills
  salary              Int
  companyName         String
  responsibilities    String[]
  qualifications      String[]
  jobType             String
  status              JobStatus        @default(Open)
  applicationDeadline String
  // rating      Float?
  // reviews     Int?
  // companyId          String?
  // company            Company?  @relation(fields: [companyId], references: [id])

  postedById String?
  postedBy   Users?  @relation("UserPostedJobs", fields: [postedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
